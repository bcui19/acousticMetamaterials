
# TITRE GUIDE D'ONDE A SORTIE ANECHOIQUE (ONDES PLANES) E.F. CLASSIQUES
#            CONFIGURATION MANAGEMENT OF EDF VERSION
# ======================================================================
# COPYRIGHT (C) 1991 - 2012  EDF R&D                  WWW.CODE-ASTER.ORG
# THIS PROGRAM IS FREE SOFTWARE; YOU CAN REDISTRIBUTE IT AND/OR MODIFY
# IT UNDER THE TERMS OF THE GNU GENERAL PUBLIC LICENSE AS PUBLISHED BY
# THE FREE SOFTWARE FOUNDATION; EITHER VERSION 2 OF THE LICENSE, OR
# (AT YOUR OPTION) ANY LATER VERSION.
#
# THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT
# WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SEE THE GNU
# GENERAL PUBLIC LICENSE FOR MORE DETAILS.
#
# YOU SHOULD HAVE RECEIVED A COPY OF THE GNU GENERAL PUBLIC LICENSE
# ALONG WITH THIS PROGRAM; IF NOT, WRITE TO EDF R&D CODE_ASTER,
#    1 AVENUE DU GENERAL DE GAULLE, 92141 CLAMART CEDEX, FRANCE.
# ======================================================================
#  MODELISATION 'ACOUSTIQUE' AVEC ELEMENTS HEXA20 ET FACE8
#  GUIDE D'ONDE ACOUSTIQUE EN E.F. CLASSIQUES
#

import numpy as np
import math

## input parameters 
lowFreq = 20
highFreq = 3000 
dFreq = 12
file_impedance = '/media/2TB/ZL_l0.100_r0.010.txt' 
##

DEBUT( );


BUFFSIZE=10000
u = -0.014

Pr       = [None] * BUFFSIZE
ZZ = [None] * BUFFSIZE

frequencySweep = range(lowFreq, highFreq, dFreq)

f, Zreal, Zimag = np.loadtxt(file_impedance, unpack=True)

# import the mesh as MED format
MAIL=LIRE_MAILLAGE(FORMAT='MED', )

# define the air material
AIR=DEFI_MATERIAU( FLUIDE=_F( RHO = 1.3, CELE_C = ('RI',343.,0.,)))

# set the affecter of the material on the geometry
# TOUT means everything? OUI is yes. 
CHAMPMAT=AFFE_MATERIAU(  MAILLAGE=MAIL,
                         AFFE=_F( TOUT = 'OUI',  MATER = AIR) )

# define the FEM model to use. Here 
GUIDE=AFFE_MODELE(  MAILLAGE=MAIL,     
                    VERIF='MAILLE',
                    AFFE=_F( TOUT = 'OUI', 
                             MODELISATION = '3D',
                             PHENOMENE = 'ACOUSTIQUE'), )


# CAC=AFFE_CHAR_ACOU( MODELE=GUIDE, 
#                     VITE_FACE=_F(GROUP_MA='ENTREE', 
#                                  VNOR=('RI',-0.014,0.,),),
#                     IMPE_FACE=_F(FROUP_MA='SORTIE', 
#                                  PRES=('RI',0.,0.,),) );
#                     # PRES_IMPO=_F(GROUP_MA='SORTIE',
#                     #              PRES=('RI',0.0,0.0,),) );

u = -0.014
fake_zero = 0.0
#1E-10
                    
# define the constant acoustic boundary condition
# here VITE_FACE is vibration velocity field
CHARACOU=AFFE_CHAR_ACOU( MODELE=GUIDE,
                         VITE_FACE=( _F( GROUP_MA = 'ENTREE', 
                                       VNOR = ('RI', 0, 0.0,)),
                                     _F( GROUP_MA = 'SORTIE', 
                                       VNOR = ('RI', 5, 0.0,)),
                                       )
                                       )

## Set up matrices 
n = 0
for F in frequencySweep: 


    # PRESACOU=AFFE_CHAR_ACOU( MODELE=GUIDE,
    #                          PRES_IMPO=_F( GROUP_MA = 'SORTIE', 
    #                                        PRES = ('RI', 0., 0.,)))
    ## Perfect end condition
    # ZZ[n]=AFFE_CHAR_ACOU( MODELE=GUIDE,
    #                          IMPE_FACE=_F( GROUP_MA = 'SORTIE', 
    #                                        IMPE = ('RI', 0.000001, 0.000001,)))

    ZR = Zreal[n] if np.abs(Zreal[n]) > 1E-10 else 1E-10
    ZI = Zimag[n] if np.abs(Zimag[n]) > 1E-10 else 1E-10

    ZR = 0.0000001
    ZI = 0.0000001
    
    
    # ZZ[n]=AFFE_CHAR_ACOU( MODELE=GUIDE,
    #                         IMPE_FACE=_F( GROUP_MA = 'SORTIE', 
    #                         IMPE = ('RI', ZR, ZI,)))
    
    #ZZ[n]=AFFE_CHAR_ACOU( MODELE=GUIDE,
    #                     VITE_FACE=_F( GROUP_MA = 'SORTIE', 
    #                                  VNOR = ('RI', 0, 0.,)))
    
    print 'Impedance Table Lookup (F,ZR,ZI) = ', F, ZR, ZI

    ## Anechoic end condition
    # IMPEACOU=AFFE_CHAR_ACOU( MODELE=GUIDE,
    #                          IMPE_FACE=_F( GROUP_MA = 'SORTIE', 
    #                                        IMPE = ('RI', 445.9,0.,)))
  
    # compute all the matrices
    ASSEMBLAGE(  MODELE=GUIDE,         
                 # CHARGE=ZZ[n], # rigid conditions?
                 CHAM_MATER=CHAMPMAT, # total elementary computation
                 CHARGE=CHARACOU,
                 NUME_DDL=CO("NU"),
                 VECT_ASSE=(_F( VECTEUR = CO("VECTASS"),OPTION='CHAR_ACOU', CHARGE=CHARACOU)),
                 MATR_ASSE=(_F( MATRICE = CO("MATASK"), OPTION = 'RIGI_ACOU'),
                            _F( MATRICE = CO("MATASM"), OPTION = 'MASS_ACOU'),) 
                       )

# #-----------------------CALCUL HARMONIQUE-------------------------------

    Pr[n]=DYNA_VIBRA( TYPE_CALCUL='HARM',
                      BASE_CALCUL='PHYS',
                      MATR_MASS=MATASM,  
                      MATR_RIGI=MATASK,
                      #MATR_AMOR=MATASI,
                      FREQ=F,
                      EXCIT=_F( VECT_ASSE = VECTASS,  
                                COEF_MULT = 1.,
                                PUIS_PULS = 1,  
                                PHAS_DEG = 90.));
    
    ## NOTE:
    ## www.code-aster.org/doc_doc/DOCASTER_en/An_introduction_to_Code_Aster.pdf
    ## 
    ## ELGA: the calculation is done at the Gauss points of the elements 
    ## ELNO: the calculation is done at the nodes of each elements, considered
    ##       separately from the neighboring elements 
    ##       * more than one value are calculated for each node, one value from
    ##         each element sharing that node.
    ## NOEU: the calculation is done at each node
    ##       * A mean value of the values coming from each element sharing the
    ##         node
    Pr[n]=CALC_CHAMP( reuse=Pr[n],
                 TOUT_ORDRE='OUI',
                 RESULTAT=Pr[n],
                 ACOUSTIQUE=('INTE_NOEU', 'PRAC_NOEU')
           )    


    #### For visualization: won't work if in the loop...
    ## IMPR_RESU(FORMAT='MED',
    ##           RESU=_F(RESULTAT=Pr,
    ##           PARTIE='REEL',),);
    IMPR_RESU( RESU=_F(NUME_ORDRE=1,
                       RESULTAT=Pr[n],
                       # TOUT_CHAM='OUI',
                       NOM_CHAM=('INTE_NOEU', 'PRAC_NOEU'),
                       NOM_CMP=('PRES_R', 'PRES_I', 'INTX_R', 'INTX_I', 'INTY_R', 'INTY_I', 'INTZ_R', 'INTZ_I'),
                       # TOUT='OUI' # NOEUD='NO763', #MAILLE='MA57',
                       # NOEUD=('N170') # SORTIE face middle point
                       # MAILLE=('M8814')
                       # GROUP_MA=('ENTREE', 'SORTIE1', 'SORTIE2')
                       GROUP_MA=('ENTREE', 'SORTIE')
                       )
                 )
    n += 1

    DETRUIRE (CONCEPT = _F (NOM = (NU, VECTASS, MATASM, MATASK),),);


FIN()
#
